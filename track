#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import sys
import signal
import logging
import os.path

import track_qt


try:
    from PyQt4 import QtGui, QtCore, Qt, uic
except:
    print("you have to have PyQt4 for your version of Python (%s) installed"
          % ".".join(str(x) for x in sys.version_info))

    sys.exit(-1)

import track_common

class track_ui(QtGui.QMainWindow):

    def __init__(self):
        # initialize the Qt-MainWindow
        super(track_ui, self).__init__()

        self._tracker = track_qt.time_tracker(self)

        self.directory = os.path.dirname(os.path.realpath(__file__))
        self._tracker.load()

        self.initUI()

        self.frm_timegraph.setTracker(self._tracker)

        self.tbl_active_applications.setModel(self._tracker.get_applications_model())
        self.tbl_active_applications.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignLeft)
        self.tbl_active_applications.setColumnWidth(0, self.tbl_active_applications.width() * 0.75)
        self.tbl_active_applications.setColumnWidth(1, self.tbl_active_applications.width() * 0.1)

        self.tbl_category_rules.setModel(self._tracker.get_rules_model())
        self.tbl_category_rules.horizontalHeader().setDefaultAlignment(QtCore.Qt.AlignLeft)
        self.tbl_category_rules.setColumnWidth(0, self.tbl_category_rules.width() * 0.05)
        self.tbl_category_rules.setColumnWidth(1, self.tbl_category_rules.width() * 0.80)

        self.show()

    def initUI(self):
        trackui_path = os.path.join(self.directory, 'track.ui')
        uic.loadUi(trackui_path, self)

        self.setGeometry(300, 0, 700, 680)  # todo: maximize vertically
#        self.setGeometry(300, 50, 700, 680)  # todo: maximize vertically

        self.setWindowTitle('Track')
        # self.lbl_color_work.setColor(self.lbl_idle.backgroundRole(), QtCore.Qt.cyan)

        _idle_timer = QtCore.QTimer(self)
        _idle_timer.timeout.connect(self.update_idle)
        self.pb_save.clicked.connect(self.pb_save_clicked)
        self.pb_load.clicked.connect(self.pb_load_clicked)
        self.pb_regex.clicked.connect(self.pb_regex_clicked)

        _idle_timer.start(1000)

    def pb_save_clicked(self):
        print("save")
        self._tracker.save('track-manualsave.json')

    def pb_load_clicked(self):
        print("load")
        self._tracker.load('track-manualsave.json')

    def pb_regex_clicked(self):
        self._tracker.new_regex_rule()
        
    def update_idle(self):
        self._tracker.update()
        _idle = self._tracker.get_idle()
        _app = self._tracker.get_current_app_title()

        try:
            self.lbl_idle.setText(str(_idle))
            #self.lbl_private.setText(str(self._tracker.get_private_time()))
            self.lbl_title.setText(self._tracker.get_current_app_title())
            self.lbl_process.setText(self._tracker.get_current_process_name())

            # now-begin, active (.x) work (.x)
            _time_total = self._tracker.get_time_total()
            _time_active = self._tracker.get_time_active()
            _time_work = self._tracker.get_time_work()
            _time_private = self._tracker.get_time_private()
            _time_idle = self._tracker.get_time_idle()

            self.lbl_times.setText(
                "T: %s  A: %s (%.1f)  W: %s (%.1f)  "
                "P: %s (%.1f)  I: %s (%.1f)" %
                (track_common.mins_to_dur(_time_total),
                 track_common.mins_to_dur(_time_active), _time_active / float(_time_total),
                 track_common.mins_to_dur(_time_work), _time_work / float(_time_total),
                 track_common.mins_to_dur(_time_private), _time_private / float(_time_total),
                 track_common.mins_to_dur(_time_idle), _time_idle / float(_time_total)))


            self.lbl_start_time.setText("%s - %s" % (
                 self._tracker.start_time(), self._tracker.now()))
        except Exception as e:
            logging.error(e)

        p = self.lbl_idle.palette()
        if self._tracker.user_is_active():
            p.setColor(self.lbl_idle.backgroundRole(), QtCore.Qt.green)
        else:
            p.setColor(self.lbl_idle.backgroundRole(), QtCore.Qt.gray)
        self.lbl_idle.setPalette(p)

        self.update()

    def closeEvent(self, event):
        self.cleanup()

    def cleanup(self):
        print("cleanup")
        self._tracker.save()


def sigint_handler(s, window):
    sig_name = "unknown"
    if s == signal.SIGABRT:
        sig_name = "SIGABRT"
    if s == signal.SIGINT:
        sig_name = "SIGINT"
    if s == signal.SIGSEGV:
        sig_name = "SIGSEGV"
    if s == signal.SIGTERM:
        sig_name = "SIGTERM"
    logging.info("got signal %s (%s)", sig_name, str(s))
    window.cleanup()
    QtGui.QApplication.quit()


if __name__ == '__main__':
    print(sys.executable)
    app = QtGui.QApplication(sys.argv)
    ex = track_ui()
    for s in (signal.SIGABRT, signal.SIGINT, signal.SIGSEGV, signal.SIGTERM):
        signal.signal(s, lambda signal, frame: sigint_handler(signal, ex))

    # catch the interpreter every now and then to be able to catch
    # signals
    timer = QtCore.QTimer()
    timer.start(200)
    timer.timeout.connect(lambda: None)

    sys.exit(app.exec_())

